#!/bin/sh

# Copyright (C) 2020 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the “License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# remove all existing aliases
unalias -a

# set locale
LANG=C
export LANG
LC_ALL=C
export LC_ALL

# standards conformance for GNU utilities
_POSIX2_VERSION=199209
export _POSIX2_VERSION

# get current working dir
# $PWD is not set in solaris 10
UAC_DIR=`pwd`

# set path
PATH="/usr/xpg4/bin:/usr/xpg6/bin:/bin:/sbin:/usr/bin:/usr/sbin"
PATH="${PATH}:/usr/local/bin:/usr/local/sbin:/usr/ucb:/usr/ccs/bin:/opt/bin"
PATH="${PATH}:/opt/sbin:/opt/local/bin:/netscaler"
export PATH

# load lib files
. "${UAC_DIR}/lib/archive_compress_data.sh"
. "${UAC_DIR}/lib/archive_data.sh"
. "${UAC_DIR}/lib/array_to_list.sh"
. "${UAC_DIR}/lib/check_available_system_tools.sh"
. "${UAC_DIR}/lib/command_collector.sh"
. "${UAC_DIR}/lib/copy_data.sh"
. "${UAC_DIR}/lib/file_collector.sh"
. "${UAC_DIR}/lib/find_collector.sh"
. "${UAC_DIR}/lib/find_wrapper.sh"
. "${UAC_DIR}/lib/get_current_user.sh"
. "${UAC_DIR}/lib/get_days_since_date_until_now.sh"
. "${UAC_DIR}/lib/get_epoch_date.sh"
. "${UAC_DIR}/lib/get_hostname.sh"
. "${UAC_DIR}/lib/get_mount_point_by_file_system.sh"
. "${UAC_DIR}/lib/get_operating_system.sh"
. "${UAC_DIR}/lib/get_system_arch.sh"
. "${UAC_DIR}/lib/get_user_home_list.sh"
. "${UAC_DIR}/lib/hash_collector.sh"
. "${UAC_DIR}/lib/is_element_in_list.sh"
. "${UAC_DIR}/lib/is_integer.sh"
. "${UAC_DIR}/lib/is_running_with_root_privileges.sh"
. "${UAC_DIR}/lib/list_artifacts.sh"
. "${UAC_DIR}/lib/list_profiles.sh"
. "${UAC_DIR}/lib/load_config_file.sh"
. "${UAC_DIR}/lib/log_message.sh"
. "${UAC_DIR}/lib/lrstrip.sh"
. "${UAC_DIR}/lib/parse_artifacts_file.sh"
. "${UAC_DIR}/lib/parse_profile_file.sh"
. "${UAC_DIR}/lib/print_acquisition_log.sh"
. "${UAC_DIR}/lib/regex_match.sh"
. "${UAC_DIR}/lib/regex_not_match.sh"
. "${UAC_DIR}/lib/sanitize_filename.sh"
. "${UAC_DIR}/lib/sanitize_path.sh"
. "${UAC_DIR}/lib/sftp_transfer.sh"
. "${UAC_DIR}/lib/sort_uniq_file.sh"
. "${UAC_DIR}/lib/stat_collector.sh"
. "${UAC_DIR}/lib/terminate.sh"
. "${UAC_DIR}/lib/usage.sh"
. "${UAC_DIR}/lib/validate_artifacts_file.sh"
. "${UAC_DIR}/lib/validate_profile_file.sh"

# global vars
UAC_VERSION="2.0.0"
MOUNT_POINT="/"
OPERATING_SYSTEM=""
SYSTEM_ARCH=""
START_DATE=""
START_DATE_DAYS=""
START_DATE_EPOCH=""
END_DATE=""
END_DATE_DAYS=""
END_DATE_EPOCH=""

# local vars
ua_artifacts=""
ua_profile=""
ua_destination_dir=""
ua_run_as_non_root=false
ua_temp_dir=""
ua_case_number=""
ua_evidence_number=""
ua_evidence_description=""
ua_examiner=""
ua_notes=""
ua_hostname=""
ua_sftp_destination=""
ua_sftp_port=""
ua_sftp_identity_file=""
ua_sftp_delete_local_on_success=false
ua_debug_mode=false
ua_temp_data_dir_symlink_support=false

# load config file
load_config_file "${UAC_DIR}/config/uac.conf" || exit 1

# get current command
ua_command_line="$0 $@"

# parse command line arguments
while [ "${1:-}" != "" ]; do
  case "${1}" in
    # optional arguments
    "-h"|"--help")
      usage
      exit 1
      ;;
    "-V"|"--version")
      printf %b "UAC (Unix-like Artifacts Collector) v${UAC_VERSION}\n"
      exit 0
      ;;
    "--debug")
      ua_debug_mode=true
      ;;
    # profiling arguments
    "-p"|"--profile")
      if [ -n "${2}" ]; then
        ua_profile="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    "-a"|"--artifacts")
      if [ -n "${2}" ]; then
        ua_artifacts="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    # collection arguments
    "-m"|"--mount-point")
      if [ -n "${2}" ]; then
        MOUNT_POINT="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    "-o"|"--operating-system")
      if [ -n "${2}" ]; then
        OPERATING_SYSTEM="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    "-u"|"--run-as-non-root")
      ua_run_as_non_root=true
      ;;
    "--temp-dir")
      if [ -n "${2}" ]; then
        ua_temp_dir="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    # filter arguments
    "--date-range-start")
      if [ -n "${2}" ]; then
        START_DATE="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    "--date-range-end")
      if [ -n "${2}" ]; then
        END_DATE="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    # informational arguments
    "--case-number")
      if [ -n "${2}" ]; then
        ua_case_number="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    "--description")
      if [ -n "${2}" ]; then
        ua_evidence_description="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    "--evidence-number")
      if [ -n "${2}" ]; then
        ua_evidence_number="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    "--examiner")
      if [ -n "${2}" ]; then
        ua_examiner="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    "--notes")
      if [ -n "${2}" ]; then
        ua_notes="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    "--hostname")
      if [ -n "${2}" ]; then
        ua_hostname="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    # remote transfer arguments
    "--sftp")
      if [ -n "${2}" ]; then
        ua_sftp_destination="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    "--sftp-port")
      if [ -n "${2}" ]; then
        ua_sftp_port="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    "--sftp-identity-file")
      if [ -n "${2}" ]; then
        ua_sftp_identity_file="${2}"
        shift
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    "--sftp-delete-local-on-success")
      ua_sftp_delete_local_on_success=true
      ;;
    # validation arguments
    "--validate-artifacts-file")
      if [ -n "${2}" ]; then
        validate_artifacts_file "${2}" || exit 1
        printf %b "uac: artifacts file validated. No errors found.\n"
        exit 0
      else
        printf %b "uac: option '${1}' requires an argument.\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
    # invalid arguments
    -*)
      printf %b "uac: invalid option '${1}'\n\
Try 'uac --help' for more information.\n" >&2
      exit 1
      ;;
    # positional arguments
    *)
      if [ -z "${ua_destination_dir}" ]; then
        ua_destination_dir="${1}"
      else
        printf %b "uac: invalid option '${1}'\n\
Try 'uac --help' for more information.\n" >&2
        exit 1
      fi
      ;;
  esac
  shift
done

# treat unset variables as an error when substituting
set -u

# print available profiles
if [ -n "${ua_profile}" ] && [ "${ua_profile}" = "list" ]; then
  list_profiles
  exit 1
fi

# print available artifacts
if [ -n "${ua_artifacts}" ] && [ "${ua_artifacts}" = "list" ]; then
  list_artifacts
  exit 1
fi

# exit if a profile name and artifacts have been provided
if [ -n "${ua_profile}" ] && [ -n "${ua_artifacts}" ]; then
  printf %b "uac: invalid option '--artifacts'. \
A collection profile has already been provided.\n"
  exit 1
fi

# exit if profile and artifacts, or destination dir is empty
if { [ -z "${ua_profile}" ] && [ -z "${ua_artifacts}" ]; } \
  || [ -z "${ua_destination_dir}" ] ; then
  usage
  exit 1
fi

# profile name provided
if [ -n "${ua_profile}" ]; then
  # get proper profile file based on the profile name
  ua_profile_file=""
  for ua_file in "${UAC_DIR}"/profiles/*.yaml; do
    if grep -q -E "name: +${ua_profile} *$" <"${ua_file}"; then
      ua_profile_file="${ua_file}"
      break
    fi
  done

  # exit if profile not found
  if [ -z "${ua_profile_file}" ]; then
    printf %b "uac: profile not found '${ua_profile}'\n"
    exit 1
  fi

  # check if profile file is valid
  validate_profile_file "${ua_profile_file}" || exit 1
else
  # artifacts list provided
  OIFS="${IFS}"
  IFS=","
  for ua_artifact_file in ${ua_artifacts}; do
    ua_artifact_file=`echo "${ua_artifact_file}" | sed -e 's:^!::g' -e 's:\.\.::g'`
    find "${UAC_DIR}"/artifacts/${ua_artifact_file} -name "*.yaml" \
      -type f -print >/dev/null 2>/dev/null
    if [ "$?" -gt 0 ]; then
      printf %b "uac: artifact file not found \
'"${UAC_DIR}"/artifacts/${ua_artifact_file}'\n" >&2
      exit 1
    fi
  done
  IFS="${OIFS}"
fi

# check if destination directory exists
if [ ! -d "${ua_destination_dir}" ]; then
  printf %b "uac: no such file or directory '${ua_destination_dir}'\n" >&2
  exit 1
fi

# check if temp-dir exists
if [ -n "${ua_temp_dir}" ] && [ ! -d "${ua_temp_dir}" ]; then
  printf %b "uac: no such file or directory '${ua_temp_dir}'\n" >&2
  exit 1
fi

# get absolute destination directory path
cd "${ua_destination_dir}" && ua_destination_dir=`pwd` && cd "${UAC_DIR}"

# get operating system if not set by --operating_system
if [ -z "${OPERATING_SYSTEM}" ]; then
  OPERATING_SYSTEM=`get_operating_system`
fi
# check if operating system is supported
if [ "${OPERATING_SYSTEM}" != "android" ] \
  && [ "${OPERATING_SYSTEM}" != "aix" ] \
  && [ "${OPERATING_SYSTEM}" != "freebsd" ] \
  && [ "${OPERATING_SYSTEM}" != "linux" ] \
  && [ "${OPERATING_SYSTEM}" != "macos" ] \
  && [ "${OPERATING_SYSTEM}" != "netbsd" ] \
  && [ "${OPERATING_SYSTEM}" != "netscaler" ] \
  && [ "${OPERATING_SYSTEM}" != "openbsd" ] \
  && [ "${OPERATING_SYSTEM}" != "solaris" ]; then
  printf %b "uac: invalid operating system '${OPERATING_SYSTEM}'\n\
Try 'uac --help' for more information.\n" >&2
  exit 1
fi

# check if start and end dates are valid
if [ -n "${START_DATE}" ]; then
  START_DATE_EPOCH=`get_epoch_date "${START_DATE}"` || exit 1
  #get_days_since_date_until_now "${START_DATE}"
  START_DATE_DAYS=`get_days_since_date_until_now "${START_DATE}"`
fi
if [ -n "${END_DATE}" ]; then
  END_DATE_EPOCH=`get_epoch_date "${END_DATE}"` || exit 1
  END_DATE_DAYS=`get_days_since_date_until_now "${END_DATE}"`
  if [ "${START_DATE_EPOCH}" -gt "${END_DATE_EPOCH}" ]; then
    printf %b "uac: start date cannot be greater than end date.\n" >&2
    exit 1
  fi
fi

# check if mount point exists
if [ ! -d "${MOUNT_POINT}" ]; then
  printf %b "uac: invalid mount point. \
No such file or directory '${MOUNT_POINT}'\n" >&2
  exit 1
fi

# cannot use not (!) as Solaris 10 does not support it
if is_running_with_root_privileges || "${ua_run_as_non_root}"; then
  true
else
  printf %b "uac: this script requires root privileges to run properly.\n" >&2
  exit 1
fi

# get hostname if not set by --hostname
# useful when running UAC against a mounted image file/disk
if [ -z "${ua_hostname}" ]; then
  ua_hostname=`get_hostname 2>/dev/null`
fi

if [ -n "${ua_temp_dir}" ]; then
  rm "${ua_temp_dir}/.uac-symlink.tmp" 2>/dev/null
  if ln -s "${UAC_DIR}" "${ua_temp_dir}/.uac-symlink.tmp" 2>/dev/null; then
    rm "${ua_temp_dir}/.uac-symlink.tmp" 2>/dev/null
    ua_temp_data_dir_symlink_support=true
  fi
  TEMP_DATA_DIR="${ua_temp_dir}/uac-data.tmp"
else
  if ln -s "${UAC_DIR}" "${ua_destination_dir}/.uac-symlink.tmp" 2>/dev/null; then
    rm "${ua_destination_dir}/.uac-symlink.tmp" 2>/dev/null
    ua_temp_data_dir_symlink_support=true
  fi
  TEMP_DATA_DIR="${ua_destination_dir}/uac-data.tmp"
fi

# remove any existing (old) collected data
if [ -d "${TEMP_DATA_DIR}" ]; then
  rm -rf "${TEMP_DATA_DIR}" >/dev/null
  if [ "$?" -gt 0 ]; then
    printf %b "uac: cannot remove old temporary data directory from previous \
collection '${TEMP_DATA_DIR}'.\n"
    exit 1
  fi
fi

# create temporary directory
mkdir "${TEMP_DATA_DIR}" >/dev/null
if [ "$?" -gt 0 ]; then
  printf %b "uac: cannot create temporary data directory '${TEMP_DATA_DIR}'.\n"
  exit 1
fi

# clean up and exit if SIGINT (ctrl-c) is sent
trap terminate INT

# set log files
UAC_LOG_FILE="${TEMP_DATA_DIR}/uac.log"
UAC_STDERR_LOG_FILE="${TEMP_DATA_DIR}/uac.log.stderr"

# get current user
ua_current_user=`get_current_user 2>>"${UAC_STDERR_LOG_FILE}"`
# get system arch
SYSTEM_ARCH=`get_system_arch 2>>"${UAC_STDERR_LOG_FILE}"`

# add local 'bin' directory to path
PATH="${UAC_DIR}/bin/${OPERATING_SYSTEM}/${SYSTEM_ARCH}:${PATH}"
# add 'avml' tool directory to path
PATH="${UAC_DIR}/tools/avml/bin/${OPERATING_SYSTEM}/${SYSTEM_ARCH}:${PATH}"
export PATH

printf %b "--------------------------------------------------------------------------------\n"
printf %b "  __   __ _______ _______ \n"
printf %b " |: | |  |:  _   |:  ____|\n"
printf %b " |  |_|  |  | |  |  |____ \n"
printf %b " |_______|__| |__|_______|\n"
printf %b "\n"
printf %b " Unix-like Artifacts Collector v${UAC_VERSION}\n"
printf %b "--------------------------------------------------------------------------------\n"
printf %b "Operating System    : ${OPERATING_SYSTEM}\n"
printf %b "System Architecture : ${SYSTEM_ARCH}\n"
printf %b "Hostname            : ${ua_hostname}\n"
printf %b "Mount Point         : ${MOUNT_POINT}\n"
printf %b "Running as          : ${ua_current_user}\n"
printf %b "Temp Directory      : ${TEMP_DATA_DIR}\n"
printf %b "--------------------------------------------------------------------------------\n"

# start uac.log file
log_message INFO "UAC (Unix-like Artifacts Collector) v${UAC_VERSION}"
log_message INFO "Command line: ${ua_command_line}"
log_message INFO "Operating system: ${OPERATING_SYSTEM}"
log_message INFO "System architecture: ${SYSTEM_ARCH}"
log_message INFO "Hostname: ${ua_hostname}"
log_message INFO "Mount point: ${MOUNT_POINT}"
log_message INFO "Running as: ${ua_current_user}"
log_message INFO "Date range start: ${START_DATE}"
log_message INFO "Date range end: ${END_DATE}"
log_message INFO "Case number: ${ua_case_number}"
log_message INFO "Evidence number: ${ua_evidence_number}"
log_message INFO "Description: ${ua_evidence_description}"
log_message INFO "Examiner: ${ua_examiner}"
log_message INFO "Notes: ${ua_notes}"
log_message INFO "Temp directory: ${TEMP_DATA_DIR}"
log_message INFO "Current PID: ${$}"

# global exclusions from uac.conf
log_message INFO "Loading uac.conf settings"
log_message INFO "Global exclude path pattern: ${GLOBAL_EXCLUDE_PATH_PATTERN}"
log_message INFO "Global exclude name pattern: ${GLOBAL_EXCLUDE_NAME_PATTERN}"
log_message INFO "Global exclude file system: ${GLOBAL_EXCLUDE_FILE_SYSTEM}"
# get mount points to globally exclude from collection
GLOBAL_EXCLUDE_MOUNT_POINT=""
if [ -n "${GLOBAL_EXCLUDE_FILE_SYSTEM}" ]; then
  GLOBAL_EXCLUDE_MOUNT_POINT=`get_mount_point_by_file_system \
    "${GLOBAL_EXCLUDE_FILE_SYSTEM}"`
fi
log_message INFO "Global exclude mount point: ${GLOBAL_EXCLUDE_MOUNT_POINT}"
log_message INFO "Hash algorithm: ${HASH_ALGORITHM}"
log_message INFO "Enable find mtime: ${ENABLE_FIND_MTIME}"
log_message INFO "Enable find atime: ${ENABLE_FIND_ATIME}"
log_message INFO "Enable find ctime: ${ENABLE_FIND_CTIME}"

# check available system tools
log_message INFO "Checking available system tools"
check_available_system_tools >/dev/null 2>>"${UAC_STDERR_LOG_FILE}"

log_message INFO "MD5 hashing tool: ${MD5_HASHING_TOOL}"
log_message INFO "SHA1 hashing tool: ${SHA1_HASHING_TOOL}"
log_message INFO "SHA256 hashing tool: ${SHA256_HASHING_TOOL}"
log_message INFO "'tar' tool available: ${TAR_TOOL_AVAILABLE}"
log_message INFO "'gzip' tool available: ${GZIP_TOOL_AVAILABLE}"
log_message INFO "'stat' tool available: ${STAT_TOOL_AVAILABLE}"
log_message INFO "'stat' btime support: ${STAT_BTIME_SUPPORT}"
log_message INFO "'statx' tool available: ${STATX_TOOL_AVAILABLE}"

log_message INFO "PATH: ${PATH}"

# create a temporary profile file based on the artifacts provided via command
# line
if [ -n "${ua_artifacts}" ]; then
  printf %b "name: temp-profile\n" >"${TEMP_DATA_DIR}/.profile.yaml"
  printf %b "description: temp-profile\n" >>"${TEMP_DATA_DIR}/.profile.yaml"
  printf %b "artifacts:\n" >>"${TEMP_DATA_DIR}/.profile.yaml"
  OIFS="${IFS}"
  IFS=","
  for ua_artifact_file in ${ua_artifacts}; do
    printf %b "  - ${ua_artifact_file}\n" >>"${TEMP_DATA_DIR}/.profile.yaml"
  done
  IFS="${OIFS}"
  ua_profile_file="${TEMP_DATA_DIR}/.profile.yaml"
fi

# parse profile file
log_message INFO "Parsing profile file '${ua_profile_file}'"
parse_profile_file "${ua_profile_file}" || exit 1

# add UAC_DIR abd TEMP_DATA_DIR to GLOBAL_EXCLUDE_PATH_PATTERN
if [ -n "${GLOBAL_EXCLUDE_PATH_PATTERN}" ]; then
  GLOBAL_EXCLUDE_PATH_PATTERN="${GLOBAL_EXCLUDE_PATH_PATTERN},${UAC_DIR},${TEMP_DATA_DIR}"
else
  GLOBAL_EXCLUDE_PATH_PATTERN="${UAC_DIR},${TEMP_DATA_DIR}"
fi

# get all user/home list
USER_HOME_LIST=`get_user_home_list 2>>"${UAC_STDERR_LOG_FILE}"`
# get user/home list skipping users with non-interactive shells
VALID_SHELL_ONLY_USER_HOME_LIST=`get_user_home_list true 2>>"${UAC_STDERR_LOG_FILE}"`

# acquisition start date
ua_acq_start_date=`date "+%a %b %d %H:%M:%S %Y %z" 2>>"${UAC_STDERR_LOG_FILE}"`
# acquisition start epoch date
ua_acq_start_date_epoch=`get_epoch_date 2>>"${UAC_STDERR_LOG_FILE}"`

log_message INFO "Artifacts collection started"
printf %b "Artifacts collection started...\n"

ua_progress_current=0
ua_progress_total=`wc -l "${TEMP_DATA_DIR}/.artifacts.tmp" | awk '{print $1}'`

# enable debug mode if it is set to true
${ua_debug_mode} && set -x

while read ua_artifact_file || [ -n "${ua_artifact_file}" ]; do
  log_message INFO "Parsing artifacts file '${ua_artifact_file}'"
  ua_progress_current=`expr ${ua_progress_current} + 1`
  printf "[%03d/%03d] %b\n" "${ua_progress_current}" \
    "${ua_progress_total}" "${ua_artifact_file}"
  ua_artifacts_root_output_directory=`dirname "${ua_artifact_file}"`
  parse_artifacts_file "${UAC_DIR}/artifacts/${ua_artifact_file}" \
    "${ua_artifacts_root_output_directory}"
done <"${TEMP_DATA_DIR}/.artifacts.tmp" 2>>"${UAC_STDERR_LOG_FILE}"

# disable debug mode
${ua_debug_mode} && set +x

# acquisition end date
ua_acq_end_date=`date "+%a %b %d %H:%M:%S %Y %z" 2>>"${UAC_STDERR_LOG_FILE}"`
# acquisition end epoch date
ua_acq_end_date_epoch=`get_epoch_date 2>>"${UAC_STDERR_LOG_FILE}"`
# get current date and time string (it will be part of the output file name)
ua_current_date_time=`date "+%Y%m%d%H%M%S"`

# calculate running time
ua_total_running_time=`expr ${ua_acq_end_date_epoch} - ${ua_acq_start_date_epoch}`

printf %b "--------------------------------------------------------------------------------\n"
log_message INFO "Artifacts collection complete. \
Total running time: ${ua_total_running_time} seconds"

printf %b "Artifacts collection complete. \
Total running time: ${ua_total_running_time} seconds\n"

if [ -f "${TEMP_DATA_DIR}/.files.tmp" ]; then
  if ${ua_temp_data_dir_symlink_support}; then
    # create symbolic link to mount point
    ln -s "${MOUNT_POINT}" "${TEMP_DATA_DIR}/[root]" 2>>"${UAC_STDERR_LOG_FILE}"
  else
    # copy files to uac-data.tmp/[root]
    printf %b "Copying files to ${TEMP_DATA_DIR}/[root]. Please wait...\n"
    copy_data "${TEMP_DATA_DIR}/.files.tmp" "${TEMP_DATA_DIR}/[root]" \
      2>>"${UAC_STDERR_LOG_FILE}"
  fi

  # add [root] string to the beginning of each entry in .files.tmp
  # and add them to the list of files to be archived within the output file
  sed -e 's:^/:\[root\]/:' "${TEMP_DATA_DIR}/.files.tmp" \
    >>"${TEMP_DATA_DIR}/.output_file.tmp"
fi

# add uac.log to the list of files to be archived within the output file
echo "uac.log" >>"${TEMP_DATA_DIR}/.output_file.tmp"
# add uac.log.stderr to the list of files to be archived within the output file
echo "uac.log.stderr" >>"${TEMP_DATA_DIR}/.output_file.tmp"

# sort and uniq
sort_uniq_file "${TEMP_DATA_DIR}/.output_file.tmp" 2>>"${UAC_STDERR_LOG_FILE}"

# output file name
ua_output_file=""

if ${TAR_TOOL_AVAILABLE} && ${GZIP_TOOL_AVAILABLE}; then
  # archive and compress collected artifacts to output file
  printf %b "Creating output file. Please wait...\n"
  ua_output_file="uac-${ua_hostname}-${OPERATING_SYSTEM}-${ua_current_date_time}.tar.gz"
  
  cd "${TEMP_DATA_DIR}"
  if archive_compress_data ".output_file.tmp" \
    "${ua_destination_dir}/${ua_output_file}" 2>/dev/null; then
    printf %b "Output file created '${ua_destination_dir}/${ua_output_file}'\n"
    cd "${UAC_DIR}"
    rm -rf "${TEMP_DATA_DIR}" >/dev/null 2>/dev/null
    if [ -d "${TEMP_DATA_DIR}" ]; then
        printf %b "Cannot remove temporary directory '${TEMP_DATA_DIR}'\n"
    fi
  else
    printf %b "Cannot create output file\n"
    printf %b "Please check collected artifacts in '${TEMP_DATA_DIR}'\n"
    cd "${UAC_DIR}" && exit 1
  fi

elif ${TAR_TOOL_AVAILABLE}; then
  # archive collected artifacts to output to file
  printf %b "Creating output file. Please wait...\n"
  ua_output_file="uac-${ua_hostname}-${OPERATING_SYSTEM}-${ua_current_date_time}.tar"

  cd "${TEMP_DATA_DIR}"
  if archive_data ".output_file.tmp" \
    "${ua_destination_dir}/${ua_output_file}" 2>/dev/null; then
    printf %b "Output file created '${ua_destination_dir}/${ua_output_file}'\n"
    cd "${UAC_DIR}"
    rm -rf "${TEMP_DATA_DIR}" >/dev/null 2>/dev/null
    if [ -d "${TEMP_DATA_DIR}" ]; then
        printf %b "Cannot remove temporary directory '${TEMP_DATA_DIR}'\n"
    fi
  else
    printf %b "Cannot create output file\n"
    printf %b "Please check collected artifacts in '${TEMP_DATA_DIR}'\n"
    cd "${UAC_DIR}" && exit 1
  fi
fi

ua_output_file_hash=""

# hash output file
if [ -f "${ua_destination_dir}/${ua_output_file}" ]; then
  printf %b "Hashing output file. Please wait...\n"
  cd "${ua_destination_dir}"
  ua_output_file_hash=`${MD5_HASHING_TOOL} "${ua_output_file}"`
  cd "${UAC_DIR}"
fi

# acquisition log file name
ua_acquisition_log="uac-${ua_hostname}-${OPERATING_SYSTEM}-${ua_current_date_time}.log"

# print acquisition log to file
print_acquisition_log \
  "${ua_case_number}" \
  "${ua_evidence_number}" \
  "${ua_evidence_description}" \
  "${ua_examiner}" \
  "${ua_notes}" \
  "${ua_hostname}" \
  "${ua_acq_start_date}" \
  "${ua_acq_end_date}" \
  "${ua_output_file_hash}" \
    >"${ua_destination_dir}/${ua_acquisition_log}"

printf %b "Acquisition log created \
'${ua_destination_dir}/${ua_acquisition_log}'\n"

# transfer output and log file to remote scp server
if [ -n "${ua_sftp_destination}" ]; then
  printf %b "Transferring output file to remote SFTP server. Please wait...\n"
  if sftp_transfer "${ua_destination_dir}/${ua_output_file}" \
    "${ua_sftp_destination}" "${ua_sftp_port}" "${ua_sftp_identity_file}"; then
    printf %b "File transferred successfully\n"
    # delete output file on success transfer
    ${ua_sftp_delete_local_on_success} \
      && rm -f "${ua_destination_dir}/${ua_output_file}" 2>/dev/null
    printf %b "Transferring log file to remote SFTP server. Please wait...\n"
    if sftp_transfer "${ua_destination_dir}/${ua_acquisition_log}" \
      "${ua_sftp_destination}" "${ua_sftp_port}" "${ua_sftp_identity_file}"; then
      printf %b "File transferred successfully\n"
      # delete log file on success transfer
      ${ua_sftp_delete_local_on_success} \
        && rm -f "${ua_destination_dir}/${ua_acquisition_log}" 2>/dev/null
    else
      printf %b "Could not transfer log file to remote SFTP server\n"
      exit 1
    fi
  else
    printf %b "Could not transfer output file to remote SFTP server\n"
    exit 1
  fi
fi

exit 0
