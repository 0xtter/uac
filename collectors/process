# Copyright (C) 2019,2020 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the “License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# process collector

run_command "ps" "$COLLECTOR_OUTPUT_DIR/ps.txt"
run_command "ps auxwww" "$COLLECTOR_OUTPUT_DIR/ps-auxwww.txt"
run_command "ps -deaf" "$COLLECTOR_OUTPUT_DIR/ps-deaf.txt"
run_command "ps -ef" "$COLLECTOR_OUTPUT_DIR/ps-ef.txt"
run_command "ps -efl" "$COLLECTOR_OUTPUT_DIR/ps-efl.txt"
run_command "ps -eo pid,etime,args" "$COLLECTOR_OUTPUT_DIR/ps-eo-pid-etime-args.txt"
run_command "ps -eo pid,lstart,args" "$COLLECTOR_OUTPUT_DIR/ps-eo-pid-lstart-args.txt"
run_command "lsof -n -P -l" "$COLLECTOR_OUTPUT_DIR/lsof-n-P-l.txt"

LOCAL_PROC_PID_EXE_LINK=""

case "$PROFILE" in
    "aix")
        run_command "pstat -a" "$COLLECTOR_OUTPUT_DIR/pstat-a.txt"
        run_command "pstat -A" "$COLLECTOR_OUTPUT_DIR/pstat-A.txt"
        run_command "pstat -f" "$COLLECTOR_OUTPUT_DIR/pstat-f.txt"
        run_command "pstat -p" "$COLLECTOR_OUTPUT_DIR/pstat-p.txt"
        # aix uses /proc/PID/object/a.out file
        if [ -f "/proc/$$/object/a.out" ]; then
            LOCAL_PROC_PID_EXE_LINK="object/a.out"
        fi
        ;;
    "bsd")
        run_command "fstat" "$COLLECTOR_OUTPUT_DIR/fstat.txt"
        run_command "top -b" "$COLLECTOR_OUTPUT_DIR/top-b.txt"
        # some BSD distros use /proc/PID/exe symlink
        if [ -h "/proc/$$/exe" ]; then
            LOCAL_PROC_PID_EXE_LINK="exe"
        elif [ -f "/proc/$$/file" ]; then
            # some BSD distros use /proc/PID/file file
            LOCAL_PROC_PID_EXE_LINK="file"
        fi
        ;;
    "linux")
        run_command "pstree" "$COLLECTOR_OUTPUT_DIR/pstree.txt"
        run_command "top -b -n1" "$COLLECTOR_OUTPUT_DIR/top-b-n1.txt"
        # most linux distros use /proc/PID/exe symlink
        if [ -h "/proc/$$/exe" ]; then
            LOCAL_PROC_PID_EXE_LINK="exe"
        fi
        ;;
    "macos")
        run_command "top -l1" "$COLLECTOR_OUTPUT_DIR/top-l1.txt"
        ;;
    "solaris")
        run_command "ptree -a" "$COLLECTOR_OUTPUT_DIR/ptree-a.txt"
        run_command "top -b" "$COLLECTOR_OUTPUT_DIR/top-b.txt"
        run_command "find /proc -type d -name path -exec ls -la \"{}\" \\;" "$COLLECTOR_OUTPUT_DIR/running_processes_files.txt"
        run_command "pfiles /proc/*" "$COLLECTOR_OUTPUT_DIR/pfiles-proc.txt"
        # solaris uses /proc/PID/path/a.out symlink
        if [ -h "/proc/$$/path/a.out" ]; then
            LOCAL_PROC_PID_EXE_LINK="path/a.out"
        fi
        ;;
esac

# if /proc exists, lets use it to generate the hashes and extract strings from running processes
if [ ! -z "$LOCAL_PROC_PID_EXE_LINK" ]; then

    run_command "find /proc/*/$LOCAL_PROC_PID_EXE_LINK -print | while read line; do ls -l \$line; done" "$COLLECTOR_OUTPUT_DIR/running_processes_full_paths.txt"
    if [ ! -z "$MD5SUM_TOOL" ]; then
        # hash running processes from /proc/PID/LOCAL_PROC_PID_EXE_LINK
        run_command "find /proc/*/$LOCAL_PROC_PID_EXE_LINK -print | while read line; do \$MD5SUM_TOOL \$line; done" "$COLLECTOR_OUTPUT_DIR/running_processes_hashes.txt"
    else
        logging D "Cannot hash running processes. No MD5 hashing tool was found on the system.\n"
    fi

    # extracting strings from running processes
    $EXTRACT_STRINGS_RUNNING_PROCESSES && run_command "mkdir -p \"$COLLECTOR_OUTPUT_DIR/strings\"" "/dev/null"
    $EXTRACT_STRINGS_RUNNING_PROCESSES && run_command "find /proc/*/$LOCAL_PROC_PID_EXE_LINK -print | while read line; do cut -d\"/\" -f 3; done | while read pid; do strings -a /proc/\$pid/$LOCAL_PROC_PID_EXE_LINK | $COMPRESS_TOOL > \"$COLLECTOR_OUTPUT_DIR/strings/\$pid.txt.$COMPRESS_EXT\"; done" "/dev/null"

else
    # lets use ps output to generate the hashes and extract strings from running processes
    
    run_command "ps -eo args | grep \"^/\" | awk '{print \$1}' | sort | uniq" "$COLLECTOR_OUTPUT_DIR/running_processes_full_paths.txt"
    # old busybox support
    if [ ! -s "$COLLECTOR_OUTPUT_DIR/running_processes_full_paths.txt" ]; then
        run_command "ps | grep \"^/\" | awk '{print \$5}' | sort | uniq" "$COLLECTOR_OUTPUT_DIR/running_processes_full_paths.txt"
    fi

    if [ ! -z "$MD5SUM_TOOL" ]; then
        run_command "cat \"$COLLECTOR_OUTPUT_DIR/running_processes_full_paths.txt\" | while read line; do \$MD5SUM_TOOL \$line; done" "$COLLECTOR_OUTPUT_DIR/running_processes_hashes.txt"
    else
        logging D "Cannot hash running processes. No MD5 hashing tool was found on the system.\n"
    fi

    # extracting strings from running processes
    $EXTRACT_STRINGS_RUNNING_PROCESSES && run_command "mkdir -p \"$COLLECTOR_OUTPUT_DIR/strings\"" "/dev/null"
    $EXTRACT_STRINGS_RUNNING_PROCESSES && run_command "cat \"$COLLECTOR_OUTPUT_DIR/running_processes_full_paths.txt\" | while read line; do LOCAL_PROC_NAME=\`echo \$line | sed 's:^/::; s:/:_:g'\` && strings -a \$line | $COMPRESS_TOOL > \"$COLLECTOR_OUTPUT_DIR/strings/\$LOCAL_PROC_NAME.txt.$COMPRESS_EXT\"; done" "/dev/null"

fi

